"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var RTE = __importStar(require("../../ReaderTaskEither"));
var path = __importStar(require("path"));
var Mustache = __importStar(require("mustache"));
var Apply_1 = require("fp-ts/lib/Apply");
var function_1 = require("fp-ts/lib/function");
var type_utils_1 = require("../../type-utils");
var assets_dir_1 = require("../../assets-dir");
var split_lines_1 = require("../../split-lines");
var package_json_1 = __importDefault(require("./package-json"));
var ts_prefix_1 = require("@no-day/ts-prefix");
// -----------------------------------------------------------------------------
// util
// -----------------------------------------------------------------------------
var assetsDir = path.join(assets_dir_1.assetsDirRoot, 'skeleton');
var badge = function (_a) {
    var ghActions = _a.ghActions, homepage = _a.homepage;
    return ghActions
        ? "[![Test](" + homepage + "/actions/workflows/build.yml/badge.svg)](" + homepage + "/actions/workflows/build.yml)"
        : '';
};
// -----------------------------------------------------------------------------
// effect
// -----------------------------------------------------------------------------
var packageJson = RTE.scope(function (_a) {
    var config = _a.config;
    return function_1.pipe(package_json_1.default(config), RTE.of, RTE.map(type_utils_1.tag('PackageJson')));
});
var gitIgnore = function_1.pipe(['node_modules/', 'dist/', 'yarn-error.log'], type_utils_1.tag('Text'), RTE.of);
var indexTs = RTE.scope(function (_a) {
    var config = _a.config, cap = _a.cap;
    return function_1.pipe(path.join(assetsDir, 'src/index.ts'), cap.readFile, RTE.map(function (x) { return Mustache.render(x, config); }), RTE.map(split_lines_1.splitLines), RTE.map(type_utils_1.tag('Text')));
});
var tsConfig = RTE.scope(function (_a) {
    var cap = _a.cap;
    return function_1.pipe(path.join(assetsDir, 'tsconfig.json'), cap.readFile, RTE.map(split_lines_1.splitLines), RTE.map(type_utils_1.tag('Text')));
});
var tsConfigBuild = RTE.scope(function (_a) {
    var cap = _a.cap;
    return function_1.pipe(path.join(assetsDir, 'tsconfig.build.json'), cap.readFile, RTE.map(split_lines_1.splitLines), RTE.map(type_utils_1.tag('Text')));
});
var tsConfigSettings = RTE.scope(function (_a) {
    var cap = _a.cap;
    return function_1.pipe(path.join(assetsDir, 'tsconfig.settings.json'), cap.readFile, RTE.map(split_lines_1.splitLines), RTE.map(type_utils_1.tag('Text')));
});
var readme = RTE.scope(function (_a) {
    var cap = _a.cap, config = _a.config;
    return function_1.pipe(path.join(assetsDir, 'README.md'), cap.readFile, RTE.map(function (x) {
        return Mustache.render(x, function_1.pipe({ badge: badge(config) }, ts_prefix_1.merge(config)));
    }), RTE.map(split_lines_1.splitLines), RTE.map(type_utils_1.tag('Text')));
});
var main = function_1.pipe({
    'package.json': packageJson,
    '.gitignore': gitIgnore,
    'src/index.ts': indexTs,
    'tsconfig.json': tsConfig,
    'tsconfig.settings.json': tsConfigSettings,
    'tsconfig.build.json': tsConfigBuild,
    'README.md': readme,
}, Apply_1.sequenceS(RTE.ApplyPar));
// -----------------------------------------------------------------------------
// export
// -----------------------------------------------------------------------------
exports.default = main;
