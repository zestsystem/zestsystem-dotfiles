import * as TE from 'fp-ts/TaskEither';
import prompts_, { PromptObject } from 'prompts';
declare type Opts = Omit<PromptObject<'value'>, 'name'>;
declare type GetType<opts extends Opts> = opts['type'] extends 'text' ? string : opts['type'] extends 'toggle' | 'confirm' ? boolean : opts['type'] extends 'select' ? GetSelectType<opts['choices']> : unknown;
declare type GetSelectType<Xs> = Xs extends [infer head, ...infer tail] ? head extends {
    value: infer value;
} ? value | GetSelectType<tail> : '2' : never;
declare type Tuple<T> = [T] | [T, T] | [T, T, T] | [T, T, T, T] | [T, T, T, T, T] | [T, T, T, T, T, T] | [T, T, T, T, T, T, T] | [T, T, T, T, T, T, T, T];
export declare const prompts: <Opts_1 extends Omit<prompts_.PromptObject<"value">, "name"> & {
    choices?: Tuple<{
        value: unknown;
    }> | undefined;
}>(opts: Opts_1) => TE.TaskEither<string, GetType<Opts_1>>;
export {};
