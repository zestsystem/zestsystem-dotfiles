"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
var function_1 = require("fp-ts/function");
var TE = __importStar(require("fp-ts/TaskEither"));
var features = __importStar(require("./features"));
var FS = __importStar(require("./FileSystem"));
var Capabilities_1 = require("./Capabilities");
var ts_prefix_1 = require("@no-day/ts-prefix");
var UserQuest_1 = __importDefault(require("./UserQuest"));
var cli_1 = require("./Config/cli");
var CFG = __importStar(require("./Config"));
// -----------------------------------------------------------------------------
// effect
// -----------------------------------------------------------------------------
var getConfig = function (cap) {
    return function_1.pipe(TE.fromTask(cli_1.getCliOpts), TE.chain(function (config) {
        return config.noQuest
            ? TE.of(config)
            : function_1.pipe(UserQuest_1.default({ cap: cap, config: config }), TE.map(ts_prefix_1.merge(config)));
    }));
};
var generateFiles = function (_a) {
    var cap = _a.cap, config = _a.config;
    return function_1.pipe(TE.of({}), TE.chain(function (files) {
        return function_1.pipe(features.skeleton({ cap: cap, config: config, files: files }), TE.map(ts_prefix_1.merge(files)));
    }), TE.chain(function (files) {
        return config.prettier
            ? function_1.pipe(features.prettier({ cap: cap, config: config, files: files }), TE.map(ts_prefix_1.merge(files)))
            : TE.of(files);
    }), TE.chain(function (files) {
        return config.eslint
            ? function_1.pipe(features.esLint({ cap: cap, config: config, files: files }), TE.map(ts_prefix_1.merge(files)))
            : TE.of(files);
    }), TE.chain(function (files) {
        return config.jest
            ? function_1.pipe(features.jest({ cap: cap, config: config, files: files }), TE.map(ts_prefix_1.merge(files)))
            : TE.of(files);
    }), TE.chain(function (files) {
        return config.fastCheck
            ? function_1.pipe(features.fastCheck({ cap: cap, config: config, files: files }), TE.map(ts_prefix_1.merge(files)))
            : TE.of(files);
    }), TE.chain(function (files) {
        return config.docsTs
            ? function_1.pipe(features.docsTs({ cap: cap, config: config, files: files }), TE.map(ts_prefix_1.merge(files)))
            : TE.of(files);
    }), TE.chain(function (files) {
        return config.ghActions
            ? function_1.pipe(features.ghActions({ cap: cap, config: config, files: files }), TE.map(ts_prefix_1.merge(files)))
            : TE.of(files);
    }), TE.chain(function (files) {
        return config.vscode
            ? function_1.pipe(features.vscode({ cap: cap, config: config, files: files }), TE.map(ts_prefix_1.merge(files)))
            : TE.of(files);
    }), TE.chain(function (files) {
        return config.cspell
            ? function_1.pipe(features.cspell({ cap: cap, config: config, files: files }), TE.map(ts_prefix_1.merge(files)))
            : TE.of(files);
    }), TE.chain(function (files) {
        return config.markdownMagic
            ? function_1.pipe(features.markdownMagic({ cap: cap, config: config, files: files }), TE.map(ts_prefix_1.merge(files)))
            : TE.of(files);
    }));
};
var checkGitDir = function (_a) {
    var config = _a.config, cap = _a.cap;
    return config.inPlace
        ? function_1.pipe(cap.spawn('git', ['status', '--porcelain'], {})({}), TE.chain(function (_a) {
            var stdout = _a.stdout, exitCode = _a.exitCode, stderr = _a.stderr;
            return stderr === '' && stdout === '' && exitCode === 0
                ? TE.of(function_1.constVoid())
                : TE.throwError('Not inside a Git directory with clean working tree');
        }))
        : TE.of(function_1.constVoid());
};
var setup = function (_a) {
    var config = _a.config, cap = _a.cap;
    return config.runInstall
        ? function_1.pipe(cap.spawn(config.packageManager, ['install'], {
            cwd: CFG.getProjectDirectory(config),
        })({}), TE.map(function () { return function_1.constVoid(); }))
        : TE.of(function_1.constVoid());
};
var main = function_1.pipe(TE.Do, TE.bind('cap', function () { return TE.of(Capabilities_1.capabilities); }), TE.bind('config', getConfig), TE.chainFirst(checkGitDir), TE.bind('files', generateFiles), TE.chainFirst(FS.writeOut), TE.chainFirst(setup), TE.map(function_1.constVoid));
exports.main = main;
