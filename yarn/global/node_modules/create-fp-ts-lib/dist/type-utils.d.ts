export declare type Tagged<T, D> = {
    tag: T;
    data: D;
};
export declare type MapTagged<T> = {
    [key in keyof T]: Tagged<key, T[key]>;
};
export declare type Union<T> = T[keyof T];
export declare type Extends<G, H extends G> = H;
export declare const tag: <T extends string>(tag: T) => <D>(data: D) => {
    tag: T;
    data: D;
};
export declare const match: <T extends {
    tag: string;
    data: any;
}, B>(x: T, r: { [key in T["tag"]]: (x: Extract<T, {
    tag: key;
}>) => B; }) => B;
