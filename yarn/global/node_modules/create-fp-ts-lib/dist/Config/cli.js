"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCliOpts = void 0;
var yargs_1 = __importDefault(require("yargs/yargs"));
var helpers_1 = require("yargs/helpers");
var defaults_1 = require("./defaults");
var descriptions_1 = require("../Config/descriptions");
// -----------------------------------------------------------------------------
// util
// -----------------------------------------------------------------------------
var excludePromise = function (args) {
    return Promise.resolve(args);
};
// -----------------------------------------------------------------------------
// constants
// -----------------------------------------------------------------------------
var packageManagers = ['npm', 'yarn'];
var groups = {
    meta: 'Project metadata:',
    features: 'Features:',
    setup: 'Setup:',
};
// -----------------------------------------------------------------------------
// main
// -----------------------------------------------------------------------------
var getCliOpts = function () {
    return excludePromise(yargs_1.default(helpers_1.hideBin(process.argv))
        // Group: Options
        .option('noQuest', {
        alias: 'q',
        default: defaults_1.defaults.noQuest,
        boolean: true,
        description: descriptions_1.descriptions.noQuest,
    })
        .option('inPlace', {
        alias: 'u',
        default: defaults_1.defaults.inPlace,
        boolean: true,
        description: descriptions_1.descriptions.inPlace,
    })
        .option('packageManager', {
        default: defaults_1.defaults.packageManager,
        choices: packageManagers,
        description: descriptions_1.descriptions.packageManager,
    })
        // Group: Meta
        .option('name', {
        alias: 'n',
        default: defaults_1.defaults.name,
        type: 'string',
        group: groups.meta,
        description: descriptions_1.descriptions.name,
    })
        .option('homepage', {
        alias: 'h',
        default: defaults_1.defaults.homepage,
        type: 'string',
        group: groups.meta,
        description: descriptions_1.descriptions.homepage,
    })
        .option('homepageAPI', {
        default: defaults_1.defaults.homepageAPI,
        type: 'string',
        group: groups.meta,
        description: descriptions_1.descriptions.homepageAPI,
    })
        .option('projectVersion', {
        alias: 'v',
        default: defaults_1.defaults.projectVersion,
        type: 'string',
        group: groups.meta,
        description: descriptions_1.descriptions.projectVersion,
    })
        .option('license', {
        default: defaults_1.defaults.license,
        type: 'string',
        group: groups.meta,
        description: descriptions_1.descriptions.license,
    })
        // Group: Features
        .option('prettier', {
        default: defaults_1.defaults.prettier,
        boolean: true,
        group: groups.features,
        description: descriptions_1.descriptions.prettier,
    })
        .option('eslint', {
        default: defaults_1.defaults.eslint,
        boolean: true,
        group: groups.features,
        description: descriptions_1.descriptions.eslint,
    })
        .option('jest', {
        default: defaults_1.defaults.jest,
        boolean: true,
        group: groups.features,
        description: descriptions_1.descriptions.jest,
    })
        .option('fastCheck', {
        default: defaults_1.defaults.fastCheck,
        boolean: true,
        group: groups.features,
        description: descriptions_1.descriptions.fastCheck,
    })
        .option('docsTs', {
        default: defaults_1.defaults.docsTs,
        boolean: true,
        group: groups.features,
        description: descriptions_1.descriptions.docsTs,
    })
        .option('ghActions', {
        default: defaults_1.defaults.ghActions,
        boolean: true,
        group: groups.features,
        description: descriptions_1.descriptions.ghActions,
    })
        .option('vscode', {
        default: defaults_1.defaults.vscode,
        boolean: true,
        group: groups.features,
        description: descriptions_1.descriptions.vscode,
    })
        .option('markdownMagic', {
        default: defaults_1.defaults.markdownMagic,
        boolean: true,
        group: groups.features,
        description: descriptions_1.descriptions.markdownMagic,
    })
        .option('cspell', {
        default: defaults_1.defaults.cspell,
        boolean: true,
        group: groups.features,
        description: descriptions_1.descriptions.cspell,
    })
        .option('runInstall', {
        default: defaults_1.defaults.runInstall,
        boolean: true,
        group: groups.setup,
        description: descriptions_1.descriptions.runInstall,
    }).argv);
};
exports.getCliOpts = getCliOpts;
